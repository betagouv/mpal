
div#modalAdresseContainer.modal
  div.modal-content
    p.modal-text Confirmez votre adresse :
    p.modal-text-addr
    <br />
    p.modal-text2
    p.modal-text-addr2

    button.modal-adresse-cancel.btn.popin-close Modifier
    button.modal-adresse-confirm.btn.modal-confirm Confirmer

div#modalAPIparticulier.modal
  div.modal-content
    span.glyphicon.glyphicon-warning-sign style="color:#e62623;font-size:4em;"
    p.modal-text Veuillez sélectionner a nouveau un demandeur ainsi que sa civilité pour valider le rappel de l'API particulier, puis continuer sur la procédure normale.

    button.modal-api-particulier-confirm.btn.modal-confirm onclick="location.reload()" Poursuivre

- civ = ""

- if !@projet_courant.demandeur.try(:id)
  - if params[:projet].present? and params[:projet][:occupant].present? and params[:projet][:occupant][:civility] == "mrs"
    - civ = Occupant::CIVILITIES[0]
  - elsif params[:projet].present? and params[:projet][:occupant].present? and params[:projet][:occupant][:civility] == "mr"
    - civ = Occupant::CIVILITIES[1]
- else
  - civ = @projet_courant.demandeur.try(:civility)

= simple_form_for @projet_courant, url: { controller: "demandeurs", action: "update" }, html: { class: "form form-addr-submit" } do |f|
  = render "shared/errors", resource: @projet_courant
  .js-demandeur-civility
    = f.fields_for @demandeur do |ff|
      = ff.input :civility, as: :radio_buttons, collection: Occupant::CIVILITIES, required: true, :checked => civ
  = f.input :demandeur, collection: @declarants, selected: @projet_courant.demandeur.try(:id), wrapper_html: { class: "size-m" }, prompt: @declarants_prompt, required: @declarants_prompt.present?
  = f.input :adresse_postale, as: :string, input_html: { value: @projet_courant.adresse_postale.try(:description) }
  = f.input :adresse_a_renover, as: :string, input_html: { value: @projet_courant.adresse_a_renover.try(:description)}
  = f.input :tel, wrapper_html: { class: "size-s" }
  = f.input :email, wrapper_html: { class: "size-m" }

  .reliable-person
    .reliable-person-header
      p.reliable-person-question= t("demarrage_projet.demandeur.reliable_person")
      - has_reliable_person = params[:contact] ? "1" == params[:contact] : @projet_courant.personne_id.present?
      .js-reliable-person-select
        label for="reliable-person-select-no"
          input#reliable-person-select-no name="contact" type="radio" value="0" checked=(has_reliable_person ? false : "checked") /
          = t("demarrage_projet.demandeur.reliable_person_select_no")
        label for="js-reliable-person-select-yes"
          input#js-reliable-person-select-yes name="contact" type="radio" value="1" checked=(has_reliable_person ? "checked" : false) /
          = t("demarrage_projet.demandeur.reliable_person_select_yes")
    .reliable-person-form.js-reliable-person-form
      = f.fields_for :personne do |ff|
        = ff.input :civilite, as: :radio_buttons, collection: Personne::CIVILITIES
        = ff.input :prenom, wrapper_html: { class: "size-s" }
        = ff.input :nom, wrapper_html: { class: "size-s" }
        = ff.input :tel, wrapper_html: { class: "size-s" }
        = ff.input :email, wrapper_html: { class: "size-m" }
        = ff.input :lien_avec_demandeur, label: t("helpers.label.personne.lien_avec_demandeur"), wrapper_html: { class: "size-m" }
  = btn name: t("demarrage_projet.action"), class: "btn-large btn-centered btn_submit_addr", icon: "arrow-right"

- if current_agent && current_agent.admin?
  = btn name: "Rappeller l'API Particulier", href: "#", icon: "", class: "btn-secondary api-particulier"
javascript:
  <% if current_agent && current_agent.admin? %>
    $(".api-particulier").click(function(e) {
      var element = $(this);
      e.stopPropagation();
      content = <%= @projet_courant.id.to_s %>;
      $.get( "/api/particulier/refresh/" + content.toString()).done(function( data ) {
        var infos_api_particulier = JSON.stringify(data);
        var infos_api_particulier_old = data.old;
        var infos_api_particulier_avis = data.avis;
        console.log(data.status);
        console.log(data.old);
        console.log(data.avis);
        // $('.btn_submit_addr').click();
        document.getElementById("modalAPIparticulier").style.display = "block";
      });
    });

  <% end %>

javascript:
  //setup before functions
  var typingTimer;
  var doneTypingInterval = 100;
  var doneFocusInterval = 500;
  var minCharToSearch = 4;
  var confirmTimer = 5;

  var timerConfirm;
  var confirmButtonText = $('.modal-adresse-confirm').text();
  var $input = $('#projet_adresse_postale');
  var $input2 = $('#projet_adresse_a_renover');
  var modalAddr = document.getElementById("modalAdresseContainer");

  $input.attr("autocomplete", "off");
  $input2.attr("autocomplete", "off");

  function activate_confirm(){
    if (timerConfirm <= 0) {
      $('.modal-adresse-confirm').text(confirmButtonText);
      $('.modal-adresse-confirm').removeClass('modal-unclickable');
    }
    else {
      timerConfirm--;
      $('.modal-adresse-confirm').text(confirmButtonText + ' (' + timerConfirm + ')');
      setTimeout(activate_confirm, 1000);
    }
  }

  $('.btn_submit_addr').click(function(e){
    e.preventDefault();
    var addr = $("#projet_adresse_postale").val();
    var addr2 = $("#projet_adresse_a_renover").val();
    timerConfirm = confirmTimer;
    modalAddr.style.display = "block";
    if ("" != addr && null != addr && undefined != addr)
      $('.modal-text-addr').text(addr);
    $('.modal-text2').text("");
    $('.modal-text-addr2').text("");
    if (addr2 != "" && null != addr2 && undefined != addr2)
    {
      $('.modal-text2').text("Confirmez l'adresse du logement à rénover :");
      $('.modal-text-addr2').text(addr2);
    }
    <% if ENV["DOMAIN"] != "localhost:3000" %>
      $('.modal-adresse-confirm').addClass('modal-unclickable');
    <% end %>
    $('.modal-adresse-confirm').text(confirmButtonText + ' (' + timerConfirm + ')');
    setTimeout(activate_confirm, 1000);
  });
  $('.modal').click(function(event){
    if (event.target == modalAddr)
      modalAddr.style.display = "none";
  });
  $('.modal-adresse-cancel').click(function(e){
    e.stopPropagation();
    e.preventDefault();
    modalAddr.style.display = "none";
  });
  $('.modal-adresse-confirm').click(function(e){
    e.stopPropagation();
    e.preventDefault();
    if (!$(this).hasClass('modal-unclickable'))
      $('.form-addr-submit').submit();
  });
  //on keyup, start the countdown
  $input.on('keyup', function (e) {
    if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
      clearTimeout(typingTimer);
      typingTimer = setTimeout(doneTyping, doneTypingInterval);
    }
  });
  $input2.on('keyup', function (e) {
    if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
      clearTimeout(typingTimer);
      typingTimer = setTimeout(doneTyping2, doneTypingInterval);
    }
  });
  //on keydown, clear the countdown and do some other things
  $input.on('keydown', function (e) {
    if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
      clearTimeout(typingTimer);
      removeFiled();
    }
    // key arrow up
    if (e.which == 38) {
      e.preventDefault();
      var listAddr = $(".suggested-addr-list").find("li");
      var listAddrLen = listAddr.length;
      var currentSelected;
      if (listAddrLen > 1) {
        listAddr.each(function(index) {
          if ($(listAddr[index]).hasClass("li-addr-active")) { currentSelected = index; }
        });
        if (currentSelected == (0)) {
          $(listAddr[listAddrLen - 1]).addClass("li-addr-active");
          $(listAddr[currentSelected]).removeClass("li-addr-active");
        } else {
          $(listAddr[currentSelected]).removeClass("li-addr-active");
          $(listAddr[currentSelected - 1]).addClass("li-addr-active");
        }
      }
    }
    // key arrow down
    if (e.which == 40) {
      e.preventDefault();
      var listAddr = $(".suggested-addr-list").find("li");
      var listAddrLen = listAddr.length;
      var currentSelected;
      if (listAddrLen > 1) {
        listAddr.each(function(index) {
          if ($(listAddr[index]).hasClass("li-addr-active")) { currentSelected = index; }
        });
        if (currentSelected == (listAddrLen - 1)) {
          $(listAddr[0]).addClass("li-addr-active");
          $(listAddr[currentSelected]).removeClass("li-addr-active");
        } else {
          $(listAddr[currentSelected]).removeClass("li-addr-active");
          $(listAddr[currentSelected + 1]).addClass("li-addr-active");
        }
      }
    }
    // key enter
    if (e.which == 13) {
      e.preventDefault();
      var addr = $('.suggested-addr-list li.li-addr-active').text();
      if (undefined != addr && null != addr) {
        $input.val(addr);
        removeFiled();
      }
    }
    // key tab
    if (e.which == 9) {
      var addr = $('.suggested-addr-list li.li-addr-active').text();
      if (undefined != addr && null != addr && "" != addr) {
        $input.val(addr);
        removeFiled();
      }
    }
    if (e.which == 27) { removeFiled(); }
  });
  $input2.on('keydown', function (e) {
    if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
      clearTimeout(typingTimer);
      removeFiled2();
    }
    // key arrow up
    if (e.which == 38) {
      e.preventDefault();
      var listAddr = $(".suggested-addr-list").find("li");
      var listAddrLen = listAddr.length;
      var currentSelected;
      if (listAddrLen > 1) {
        listAddr.each(function(index) {
          if ($(listAddr[index]).hasClass("li-addr-active")) { currentSelected = index; }
        });
        if (currentSelected == (0)) {
          $(listAddr[listAddrLen - 1]).addClass("li-addr-active");
          $(listAddr[currentSelected]).removeClass("li-addr-active");
        } else {
          $(listAddr[currentSelected]).removeClass("li-addr-active");
          $(listAddr[currentSelected - 1]).addClass("li-addr-active");
        }
      }
    }
    // key arrow down
    if (e.which == 40) {
      e.preventDefault();
      var listAddr = $(".suggested-addr-list").find("li");
      var listAddrLen = listAddr.length;
      var currentSelected;
      if (listAddrLen > 1) {
        listAddr.each(function(index) {
          if ($(listAddr[index]).hasClass("li-addr-active")) { currentSelected = index; }
        });
        if (currentSelected == (listAddrLen - 1)) {
          $(listAddr[0]).addClass("li-addr-active");
          $(listAddr[currentSelected]).removeClass("li-addr-active");
        } else {
          $(listAddr[currentSelected]).removeClass("li-addr-active");
          $(listAddr[currentSelected + 1]).addClass("li-addr-active");
        }
      }
    }
    // key enter
    if (e.which == 13) {
      e.preventDefault();
      var addr = $('.suggested-addr-list li.li-addr-active').text();
      if (undefined != addr && null != addr) {
        $input2.val(addr);
        removeFiled2();
      }
    }
    // key tab
    if (e.which == 9) {
      var addr = $('.suggested-addr-list li.li-addr-active').text();
      if (undefined != addr && null != addr && "" != addr) {
        $input2.val(addr);
        removeFiled2();
      }
    }
    if (e.which == 27) { removeFiled2(); }
  });
  //user is "finished typing," do something
  function doneTyping () {
    var addr = $input.val();
    removeFiled();
    if (addr.length > minCharToSearch) {
      $.ajax({
        type: 'GET',
        url: "https://#{ENV['API_BAN_DOMAIN']}/search/?q=" + addr + "&autocomplete=0",
        crossDomain: true,
        success: function(response) {

          var suggestedAddr = response.features;
          if (suggestedAddr.length > 0) {
            $('.projet_adresse_postale').append("<div class='suggested-addr'><ul class='suggested-addr-list'></ul></div>");
            for (var indexValue in suggestedAddr) {
              if (suggestedAddr.hasOwnProperty(indexValue)) {
                var addrRaw = suggestedAddr[indexValue].properties;
                var formatedAddr = addrRaw.label;
                if (formatedAddr.length <= 0)
                  $input.addClass("addr-error");
                else
                  $('.suggested-addr-list').append("<li>" + formatedAddr + "</li>");
              }
            }
            $('.suggested-addr-list li:first-child').addClass("li-addr-active");
          } else $input.addClass("addr-error");
        },
        error: function(msg) { console.log("ERROR : " + JSON.stringify(msg)); }
      });
    }
  }
  function doneTyping2 () {
    var addr = $input2.val();
    removeFiled2();
    if (addr.length > minCharToSearch) {
      $.ajax({
        type: 'GET',
        url: "https://#{ENV['API_BAN_DOMAIN']}/search/?q=" + addr + "&autocomplete=0",
        crossDomain: true,
        success: function(response) {

          var suggestedAddr = response.features;
          if (suggestedAddr.length > 0) {
            $('.projet_adresse_a_renover').append("<div class='suggested-addr'><ul class='suggested-addr-list'></ul></div>");
            for (var indexValue in suggestedAddr) {
              if (suggestedAddr.hasOwnProperty(indexValue)) {
                var addrRaw = suggestedAddr[indexValue].properties;
                var formatedAddr = addrRaw.label;
                if (formatedAddr.length <= 0)
                  $input2.addClass("addr-error");
                else
                  $('.suggested-addr-list').append("<li>" + formatedAddr + "</li>");
              }
            }
            $('.suggested-addr-list li:first-child').addClass("li-addr-active");
          } else $input2.addClass("addr-error");
        },
        error: function(msg) { console.log("ERROR : " + JSON.stringify(msg)); }
      });
    }
  }
  function removeFiled() {
    $(".suggested-addr").remove();
    $input.removeClass("addr-error");
  }
  function removeFiled2() {
    $(".suggested-addr").remove();
    $input2.removeClass("addr-error");
  }
  $('#projet_adresse_postale').focusout(function() { focusTimer = setTimeout(removeFiled, doneFocusInterval); });
  $('#projet_adresse_postale').focusin(function() {
    if (typeof focusTimer !== "undefined")
      clearTimeout(focusTimer);
    doneTyping();
  });
  $('#projet_adresse_a_renover').focusout(function() { focusTimer = setTimeout(removeFiled2, doneFocusInterval); });
  $('#projet_adresse_a_renover').focusin(function() {
    if (typeof focusTimer !== "undefined")
      clearTimeout(focusTimer);
    doneTyping2();
  });
  $(".projet_adresse_postale").on('click', ".suggested-addr-list li", function() {
    var clickedAddr = $(this).text();
    if (undefined != clickedAddr && null != clickedAddr)
      $input.val(clickedAddr);
  });
  $(".projet_adresse_a_renover").on('click', ".suggested-addr-list li", function() {
    var clickedAddr = $(this).text();
    if (undefined != clickedAddr && null != clickedAddr)
      $input2.val(clickedAddr);
  });