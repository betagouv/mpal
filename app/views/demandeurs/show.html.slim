= simple_form_for @projet_courant, url: { controller: "demandeurs", action: "update" }, html: { class: "form" } do |f|
  = render "shared/errors", resource: @projet_courant
  .js-demandeur-civility
    = f.fields_for @demandeur do |ff|
      = ff.input :civility, as: :radio_buttons, collection: Occupant::CIVILITIES, required: true
  = f.input :demandeur, collection: @declarants, selected: @projet_courant.demandeur.try(:id), wrapper_html: { class: "size-m" }, prompt: @declarants_prompt, required: @declarants_prompt.present?
  = f.input :adresse_postale, as: :string, input_html: { value: @projet_courant.adresse_postale.try(:description) }
  = f.input :adresse_a_renover, as: :string, input_html: { value: @projet_courant.adresse_a_renover.try(:description)}
  = f.input :tel, wrapper_html: { class: "size-s" }
  = f.input :email, wrapper_html: { class: "size-m" }

  .reliable-person
    .reliable-person__header
      p.reliable-person__question= t("demarrage_projet.demandeur.reliable_person")
      - has_reliable_person = params[:contact] ? "1" == params[:contact] : @projet_courant.personne_id.present?
      .js-reliable-person-select
        label for="reliable-person-select-no"
          input#reliable-person-select-no name="contact" type="radio" value="0" checked=(has_reliable_person ? false : "checked") /
          = t("demarrage_projet.demandeur.reliable_person_select_no")
        label for="js-reliable-person-select-yes"
          input#js-reliable-person-select-yes name="contact" type="radio" value="1" checked=(has_reliable_person ? "checked" : false) /
          = t("demarrage_projet.demandeur.reliable_person_select_yes")
    .reliable-person__form.js-reliable-person-form
      = f.fields_for :personne do |ff|
        = ff.input :civilite, as: :radio_buttons, collection: Personne::CIVILITIES
        = ff.input :prenom, wrapper_html: { class: "size-s" }
        = ff.input :nom, wrapper_html: { class: "size-s" }
        = ff.input :tel, wrapper_html: { class: "size-s" }
        = ff.input :email, wrapper_html: { class: "size-m" }
        = ff.input :lien_avec_demandeur, label: t("helpers.label.personne.lien_avec_demandeur"), wrapper_html: { class: "size-m" }
  = btn name: t("demarrage_projet.action"), class: "btn-large btn-centered", icon: "arrow-right"

  javascript:

    //setup before functions
    var typingTimer;
    var doneTypingInterval = 100;
    var doneFocusInterval = 500;
    var minCharToSearch = 4;
    var $input = $('#projet_adresse_postale');
    var $input2 = $('#projet_adresse_a_renover');

    $input.attr("autocomplete", "off");
    $input2.attr("autocomplete", "off");

    //on keyup, start the countdown
    $input.on('keyup', function (e) {
      if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(doneTyping, doneTypingInterval);
      }
    });
    $input2.on('keyup', function (e) {
      if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(doneTyping2, doneTypingInterval);
      }
    });

    //on keydown, clear the countdown and do some other things
    $input.on('keydown', function (e) {
      if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
        clearTimeout(typingTimer);
        removeFiled();
      }
      // key arrow up
      if (e.which == 38) {
        e.preventDefault();
        var listAddr = $(".suggestedAddrList").find("li");
        var listAddrLen = listAddr.length;
        var currentSelected;
        if (listAddrLen > 1) {
          listAddr.each(function(index) {
            if ($(listAddr[index]).hasClass("li_addr_active")) { currentSelected = index; }
          });
          if (currentSelected == (0)) {
            $(listAddr[listAddrLen - 1]).addClass("li_addr_active");
            $(listAddr[currentSelected]).removeClass("li_addr_active");
          } else {
            $(listAddr[currentSelected]).removeClass("li_addr_active");
            $(listAddr[currentSelected - 1]).addClass("li_addr_active");
          }
        }
      }
      // key arrow down
      if (e.which == 40) {
        e.preventDefault();
        var listAddr = $(".suggestedAddrList").find("li");
        var listAddrLen = listAddr.length;
        var currentSelected;
        if (listAddrLen > 1) {
          listAddr.each(function(index) {
            if ($(listAddr[index]).hasClass("li_addr_active")) { currentSelected = index; }
          });
          if (currentSelected == (listAddrLen - 1)) {
            $(listAddr[0]).addClass("li_addr_active");
            $(listAddr[currentSelected]).removeClass("li_addr_active");
          } else {
            $(listAddr[currentSelected]).removeClass("li_addr_active");
            $(listAddr[currentSelected + 1]).addClass("li_addr_active");
          }
        }
      }
      // key enter
      if (e.which == 13) {
        e.preventDefault();
        var addr = $('.suggestedAddrList li.li_addr_active').text();
        if (undefined != addr && null != addr) {
          $input.val(addr);
          removeFiled();
        }
      }
      // key tab
      if (e.which == 9) {
        var addr = $('.suggestedAddrList li.li_addr_active').text();
        if (undefined != addr && null != addr && "" != addr) {
          $input.val(addr);
          removeFiled();
        }
      }
      if (e.which == 27) { removeFiled(); }
    });
    $input2.on('keydown', function (e) {
      if (e.which != 13 && e.which != 38 && e.which != 40 && e.which != 27 && e.which != 9) {
        clearTimeout(typingTimer);
        removeFiled2();
      }
      // key arrow up
      if (e.which == 38) {
        e.preventDefault();
        var listAddr = $(".suggestedAddrList").find("li");
        var listAddrLen = listAddr.length;
        var currentSelected;
        if (listAddrLen > 1) {
          listAddr.each(function(index) {
            if ($(listAddr[index]).hasClass("li_addr_active")) { currentSelected = index; }
          });
          if (currentSelected == (0)) {
            $(listAddr[listAddrLen - 1]).addClass("li_addr_active");
            $(listAddr[currentSelected]).removeClass("li_addr_active");
          } else {
            $(listAddr[currentSelected]).removeClass("li_addr_active");
            $(listAddr[currentSelected - 1]).addClass("li_addr_active");
          }
        }
      }
      // key arrow down
      if (e.which == 40) {
        e.preventDefault();
        var listAddr = $(".suggestedAddrList").find("li");
        var listAddrLen = listAddr.length;
        var currentSelected;
        if (listAddrLen > 1) {
          listAddr.each(function(index) {
            if ($(listAddr[index]).hasClass("li_addr_active")) { currentSelected = index; }
          });
          if (currentSelected == (listAddrLen - 1)) {
            $(listAddr[0]).addClass("li_addr_active");
            $(listAddr[currentSelected]).removeClass("li_addr_active");
          } else {
            $(listAddr[currentSelected]).removeClass("li_addr_active");
            $(listAddr[currentSelected + 1]).addClass("li_addr_active");
          }
        }
      }
      // key enter
      if (e.which == 13) {
        e.preventDefault();
        var addr = $('.suggestedAddrList li.li_addr_active').text();
        if (undefined != addr && null != addr) {
          $input2.val(addr);
          removeFiled2();
        }
      }

      // key tab
      if (e.which == 9) {
        var addr = $('.suggestedAddrList li.li_addr_active').text();
        if (undefined != addr && null != addr && "" != addr) {
          $input2.val(addr);
          removeFiled2();
        }
      }
      if (e.which == 27) { removeFiled2(); }
    });

    //user is "finished typing," do something
    function doneTyping () {
      var addr = $input.val();
      removeFiled();
      if (addr.length > minCharToSearch) {
        $.ajax({
          type: 'GET',
          url: "https://#{ENV['API_BAN_DOMAIN']}/search/?q=" + addr + "&autocomplete=0",
          crossDomain: true,
          success: function(response) {
            
            var suggestedAddr = response.features;
            if (suggestedAddr.length > 0) {
              $('.projet_adresse_postale').append("<div class='suggestedAddr'><ul class='suggestedAddrList'></ul></div>");
              for (var indexValue in suggestedAddr) {
                if (suggestedAddr.hasOwnProperty(indexValue)) {
                  var addrRaw = suggestedAddr[indexValue].properties;
                  var formatedAddr = addrRaw.label;
                  if (formatedAddr.length <= 0)
                    $input.addClass("addrError");
                  else
                    $('.suggestedAddrList').append("<li>" + formatedAddr + "</li>");
                }
              }
              $('.suggestedAddrList li:first-child').addClass("li_addr_active");
            } else $input.addClass("addrError");
          },
          error: function(msg) { console.log("ERROR : " + JSON.stringify(msg)); }
        });
      }
    }
    function doneTyping2 () {
      var addr = $input2.val();
      removeFiled2();
      if (addr.length > minCharToSearch) {
        $.ajax({
          type: 'GET',
          url: "https://#{ENV['API_BAN_DOMAIN']}/search/?q=" + addr + "&autocomplete=0",
          crossDomain: true,
          success: function(response) {
            
            var suggestedAddr = response.features;
            if (suggestedAddr.length > 0) {
              $('.projet_adresse_a_renover').append("<div class='suggestedAddr'><ul class='suggestedAddrList'></ul></div>");
              for (var indexValue in suggestedAddr) {
                if (suggestedAddr.hasOwnProperty(indexValue)) {
                  var addrRaw = suggestedAddr[indexValue].properties;
                  var formatedAddr = addrRaw.label;
                  if (formatedAddr.length <= 0)
                    $input2.addClass("addrError");
                  else
                    $('.suggestedAddrList').append("<li>" + formatedAddr + "</li>");
                }
              }
              $('.suggestedAddrList li:first-child').addClass("li_addr_active");
            } else $input2.addClass("addrError");
          },
          error: function(msg) { console.log("ERROR : " + JSON.stringify(msg)); }
        });
      }
    }

    function removeFiled() {
      $(".suggestedAddr").remove();
      $input.removeClass("addrError");
    }
    function removeFiled2() {
      $(".suggestedAddr").remove();
      $input2.removeClass("addrError");
    }

    $('#projet_adresse_postale').focusout(function() { focusTimer = setTimeout(removeFiled, doneFocusInterval); });
    $('#projet_adresse_postale').focusin(function() {
      if (typeof focusTimer !== "undefined")
        clearTimeout(focusTimer);
      doneTyping();
    });
    $('#projet_adresse_a_renover').focusout(function() { focusTimer = setTimeout(removeFiled2, doneFocusInterval); });
    $('#projet_adresse_a_renover').focusin(function() {
      if (typeof focusTimer !== "undefined")
        clearTimeout(focusTimer);
      doneTyping2();
    });

    $(".projet_adresse_postale").on('click', ".suggestedAddrList li", function() {
      var clickedAddr = $(this).text();
      if (undefined != clickedAddr && null != clickedAddr)
        $input.val(clickedAddr);
    });
    $(".projet_adresse_a_renover").on('click', ".suggestedAddrList li", function() {
      var clickedAddr = $(this).text();
      if (undefined != clickedAddr && null != clickedAddr)
        $input2.val(clickedAddr);
    });