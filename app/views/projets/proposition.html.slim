= simple_form_for @projet_courant, url: projet_or_dossier_proposition_path(@projet_courant), html: { method: :put, class: "form form-proposition" } do |f|
  = render "shared/errors", resource: @projet_courant
  .occupants-recap Opérateur : #{@projet_courant.operateur.raison_sociale}

  fieldset.form-proposition__fieldset
    legend.form-proposition__legend Logement
    = f.input :date_de_visite, as: :string, required: true, wrapper_html: { class: "size-s" }, input_html: { value: @projet_courant.date_de_visite? ? l(@projet_courant.date_de_visite) : "" }
    = f.fields_for :demande do |demande_form|
      = demande_form.input :type_logement, collection: Projet::TYPE_LOGEMENT_VALUES, wrapper_html: { class: "size-s" }
    = f.input :etage,         collection: Projet::ETAGE_VALUES,         wrapper_html: { class: "size-s" }, input_html: { class: "input-number" }
    = f.input :nb_pieces,     collection: Projet::NB_PIECES_VALUES,     wrapper_html: { class: "size-s" }, input_html: { class: "input-number" }
    = f.fields_for :demande do |demande_form|
      = demande_form.input :annee_construction, wrapper_html: { class: "size-s" }
    = f.input :surface_habitable, wrapper: "append", wrapper_html: { class: "size-s" } do
      = f.input_field :surface_habitable, class: "input-number"
      span.input-group-addon m²
    = f.input :consommation_avant_travaux, wrapper: "append", wrapper_html: { class: "size-s" } do
      = f.input_field :consommation_avant_travaux, class: "input-number"
      span.input-group-addon = t("helpers.units.power_consumption")
    = f.input :etiquette_avant_travaux, wrapper_html: { class: "size-s" }

  fieldset.form-proposition__fieldset
    legend.form-proposition__legend Diagnostic opérateur
    = f.input :autonomie, as: :radio_buttons, collection: yes_no_collection
    = f.input :niveau_gir, wrapper_html: { class: "size-s" }, input_html: { class: "input-number" }
    = f.input :handicap, as: :radio_buttons, collection: yes_no_collection
    = f.input :note_degradation, wrapper_html: { class: "size-s" }, input_html: { class: "input-number" }
    = f.input :note_insalubrite, wrapper_html: { class: "size-s" }, input_html: { class: "input-number" }
    = f.input :ventilation_adaptee, as: :radio_buttons, collection: yes_no_collection
    = f.input :presence_humidite, as: :radio_buttons, collection: yes_no_collection
    = f.input :auto_rehabilitation, as: :radio_buttons, collection: yes_no_collection
    = f.input :remarques_diagnostic, :input_html => {:maxlength => 250, :onkeyup => "countChar(this, 'remarques_diagnostic_count')"}
    <div class="char-count" id="remarques_diagnostic_count">250 caractère(s) restant</div>

  / TODO CSS pas jolie
  fieldset.form-proposition__fieldset
    legend.form-proposition__legend Types d’intervention
    = f.input :theme_ids, as: :check_boxes, collection: @themes, label: false

  /TODO enrober les checkboxes dans des labels
  fieldset.form-proposition__fieldset
    legend.form-proposition__legend Description des travaux proposés
    table.table.table-striped.table-sm
      thead
        tr
          th
          th= t("projets.proposition.state.desired")
          th= t("projets.proposition.state.recommended")
          th= t("projets.proposition.state.selected")
      tbody
        - @projet_courant.prestations_with_choices.each do |prestation|
          / prestation.id is the Hash key value
          - field_name = "projet[prestation_choices_attributes][#{prestation.id}]"
          tr
            td
              = prestation.libelle.capitalize
              = hidden_field_tag "#{field_name}[prestation_id]", prestation.id
            td= check_box_tag "#{field_name}[desired]",     true, prestation.desired,     id: "prestation_#{prestation.id}_desired"
            td= check_box_tag "#{field_name}[recommended]", true, prestation.recommended, id: "prestation_#{prestation.id}_recommended"
            td= check_box_tag "#{field_name}[selected]",    true, prestation.selected,    id: "prestation_#{prestation.id}_selected"

  fieldset.form-proposition__fieldset
    legend.form-proposition__legend Efficacité énergétique
    = f.input :consommation_apres_travaux, wrapper: "append", wrapper_html: { class: "size-s" } do
      = f.input_field :consommation_apres_travaux, class: "input-number"
      span.input-group-addon= t("helpers.units.power_consumption")
    = f.input :etiquette_apres_travaux, wrapper_html: { class: "size-s" }
    = f.input :gain_energetique, wrapper: "append", wrapper_html: { class: "size-s" } do
      = f.input_field :gain_energetique, class: "input-number"
      span.input-group-addon %

  fieldset.form-proposition__fieldset
    legend.form-proposition__legend Plan de financement prévisionnel
    .form-inline2


      br
      div.cat-flex-box-home
        span.line-home
        span.subtitle-home COUT DES TRAVAUX
        span.line-home
      br

      - [:travaux_ht_amount].each do |field|
        - localized_field = "localized_#{field}"
        = f.input localized_field, wrapper: "append", wrapper_html: { class: "size-s" } do
          = f.input_field localized_field, class: "input-price js-global-ht-part"
          span.input-group-addon €

      - [:assiette_subventionnable_amount].each do |field|
        - localized_field = "localized_#{field}"
        = f.input localized_field, wrapper: "append", wrapper_html: { class: "size-s" } do
          = f.input_field localized_field, class: "input-price"
          span.input-group-addon €

      = f.input :localized_global_ht_sum, wrapper: "append", wrapper_html: { class: "size-s" } do
        = f.input_field :localized_global_ttc_sum, class: "input-price", id: "js-global-ht-sum", disabled: true
        span.input-group-addon €

      = f.input :localized_travaux_ttc_amount, wrapper: "append", wrapper_html: { class: "size-s" } do
        = f.input_field :localized_travaux_ttc_amount, class: "input-price js-global-ttc-part"
        span.input-group-addon €



      - [:amo_amount, :maitrise_oeuvre_amount].each do |field|
        - localized_field = "localized_#{field}"
        = f.input localized_field, wrapper: "append", wrapper_html: { class: "size-s" } do
          = f.input_field localized_field, class: "input-price js-global-ttc-part"
          span.input-group-addon €

      = f.input :localized_global_ttc_sum, wrapper: "append", wrapper_html: { class: "size-s" } do
        = f.input_field :localized_global_ttc_sum, class: "input-price", id: "js-global-ttc-sum", disabled: true
        span.input-group-addon €


      br
      div.cat-flex-box-home
        span.line-home
        span.subtitle-home MONTANT DES AIDES SOLICITEES
        span.line-home
      br

      = f.simple_fields_for :projet_aides do |ff|
        - aid = ff.object.aide
        - if nil != aid
          - if aid.public
            = ff.input :localized_amount, label: aid.libelle, wrapper: "append", wrapper_html: { class: "size-s" } do
              - classes = "input-price #{aid.public? ? "js-public-aid js-funding" : ""}"
              = ff.hidden_field :aide_id, value: aid.id
              = ff.input_field :localized_amount, class: classes, value: ff.object.localized_amount || "0,00"
              span.input-group-addon €
          end
        end

      = f.input :localized_public_aids_sum, wrapper: "append", wrapper_html: { class: "size-s" } do
        = f.input_field :localized_public_aids_sum, class: "input-price", id: "js-public-aids-sum", disabled: true
        span.input-group-addon €

      = f.simple_fields_for :projet_aides do |ff|
        - aid = ff.object.aide
        - if nil != aid
          - if !aid.public
            = ff.input :localized_amount, label: aid.libelle, wrapper: "append", wrapper_html: { class: "size-s" } do
              - classes = "input-price js-private-aid #{aid.public? ? "js-funding" : ""}"
              = ff.hidden_field :aide_id, value: aid.id
              = ff.input_field :localized_amount, class: classes, value: ff.object.localized_amount || "0,00"
              span.input-group-addon €
          end
        end

      br
      div.cat-flex-box-home
        span.line-home
        span.subtitle-home RESTE A CHARGE PREVISIONNEL
        span.line-home
      br

      - [:personal_funding_amount, :loan_amount].each do |field|
        - localized_field = "localized_#{field}"
        = f.input localized_field, wrapper: "append", wrapper_html: { class: "size-s" } do
          = f.input_field localized_field, class: "input-price js-funding"
          span.input-group-addon €

      br
      div.cat-flex-box-home
        span.line-home
        span.subtitle-home TOTAL PREVISIONNEL DES FINANCEMENTS
        span.line-home
      br

      = f.input :localized_fundings_sum, wrapper: "append", wrapper_html: { class: "size-s" } do
        = f.input_field :localized_fundings_sum, class: "input-price", id: "js-fundings-sum", disabled: true
        span.input-group-addon €

      br
      div.cat-flex-box-home
        span.line-home
        span.subtitle-home RESTE A CHARGE
        span.line-home
      br

      = f.input :localized_remaining_sum, wrapper: "append", wrapper_html: { class: "size-s" } do
        = f.input_field :localized_remaining_sum, class: "input-price", id: "js-remaining-sum", disabled: true
        span.input-group-addon €

  = f.input :precisions_travaux, :input_html => {:maxlength => 250, :onkeyup => "countChar(this, 'precisions_travaux_count')"}
  <div class="char-count" id="precisions_travaux_count">250 caractère(s) restant</div>
  = f.input :precisions_financement, :input_html => {:maxlength => 250, :onkeyup => "countChar(this, 'precisions_financement_count')"}
  <div class="char-count" id="precisions_financement_count">250 caractère(s) restant</div>
  <p class="alert alert-danger invalidDate" style="display: none;">Année de construction incohérente ou format INVALIDE (AAAA)</p>
  <p class="alert alert-danger invalidRemain" style="display: none;">Le reste à charge doit être égale à 0</p>

  = btn name: 'Enregistrer cette proposition', icon: 'save', class: "btn-validate-submit"

javascript:

  function countChar(val, inject) {
    var len = val.value.length;
    if (len > 250) {
      val.value = val.value.substring(0, 250);
    } else {
      $('#' + inject).text(250 - len + " caractère(s) restant");
    }
  };

  $('.btn-validate-submit').click(function(e) {
    e.preventDefault();
    var currYear = new Date().toString().match(/(\d{4})/)[1];
    var validDate = true;
    var validRemain = false;

    var remainSum = parseFloat($("#js-remaining-sum")[0].value);

    if (undefined != remainSum && remainSum == 0)
      validRemain = true;

    var annee = $('#projet_demande_attributes_annee_construction').val();
    if (undefined != annee && null != annee && "" != annee) {
      annee = parseInt(annee);
      if (annee < 1500 || annee > currYear)
        validDate = false;
    }
    else
      validDate = false;

    if (validDate && validRemain)
      $('.simple_form').submit();
    else {
      if (!validDate)
        $('.invalidDate').css("display", "block");
      if (!validRemain)
        $('.invalidRemain').css("display", "block");
    }
  });
